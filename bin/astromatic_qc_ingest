#!/bin/env python

# $Id$
# $Rev::                                  $:  # Revision of last commit.
# $LastChangedBy::                        $:  # Author of last commit.
# $LastChangedDate::                      $:  # Date of last commit.

"""
Ingest an astromatic qc VOTable XML document.

usage: astromatic_qc_ingest [-h] [-b {int,char,None}] [-d] [-s SECTION] [-v]
                            file_id [qc_file_name]

Ingest data from an astromatic quality control VOTable file. The ingest is
driven by several metadata database tables based on the ID attribute of the
top-level RESOURCE tag in the VOTable file.

positional arguments:
  file_id               The id of the file being ingested
  qc_file_name          name of the astromatic qc VOTable file to ingest;
                        stdin used if name isn't provided

optional arguments:
  -h, --help            show this help message and exit
  -b {int,char,None}, --boolean_map {int,char,None}
                        select a method of mapping Boolean fields to
                        database columns; "int" maps to 1 and 0 and "char"
                        maps to T and F; default is to fail when
                        encountering a Boolean field
  -d, --debug           enable debug mode
  -s SECTION, --section SECTION
                        get connection data from SECTION in the DES service
                        access file; if not provided, methods described in
                        DESDM-3 will be used to find a section name.
  -v, --version         show program's version number and exit

Developed at: 
The National Center for Supercomputing Applications (NCSA).

Copyright (C) 2012 Board of Trustees of the University of Illinois. 
All rights reserved.
"""

__version__ = "$Rev$"

import argparse
import logging
import sys
import warnings

import aqcingestutil as qc

def main ():
    """Process the command line and ingest the provided VOTable XMl file."""

    # Define the supported maps from Boolean fields to database columns.

    bool_map_types = {'int': {True: 1, False: 0},
                      'char': {True: 'T', False: 'F'},
                      None: None
                     }

    # Setup a command line argument parser.

    parser = argparse.ArgumentParser(description=
                'Ingest data from an astromatic quality control VOTable file.'
                '  The ingestion is driven by several metadata database tables'
                ' based on the ID attribute of the top-level RESOURCE tag in '
                'the VOTable file.')

    parser.add_argument('-b', '--boolean_map', dest='bool_map',
                        choices=bool_map_types,
                        help='select a method of mapping Boolean fields to '
                        'database columns; "int" maps to 1 and 0 and "char" '
                        'maps to T and F; default is to fail when encountering '
                        'a Boolean field')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug',
                        help='enable debug mode')
    parser.add_argument('-s', '--section',  dest='section',
                        help='get connection data from SECTION in the DES '
                        'service access file; if not provided, methods '
                        'described in DESDM-3 will be used to find a section '
                        'name.')
    parser.add_argument('-v', '--version', action='version',
                        version=__version__)
    parser.add_argument('file_id', metavar='file_id', type=int,
                        help='The id of the file being ingested')
    parser.add_argument('qc_file', metavar='qc_file_name', nargs='?',
                        help='name of the astromatic qc VOTable file to '
                        "ingest; stdin used if name isn't provided")
    args = parser.parse_args()

    the_file = args.qc_file if args.qc_file else sys.stdin

    # Unless debugging, format warnings using a briefer format than the default
    # warnings.formatwaring() uses.

    if not args.debug:
        warnings.formatwarning = lambda msg, *args, **kwargs: msg

    # Setup the logger.

    log_fmt = ("%%(asctime)s: %s: %%(levelname)s: file: %s: %%(message)s"
               % (sys.argv [0], the_file))
    logging.basicConfig (format=log_fmt)
    logging.captureWarnings (True)

    bool_map = bool_map_types [args.bool_map]

    try:
        qc.ingest (the_file, args.file_id, args.section, bool_map)
    except Exception as exc:
        logging.critical ('Ingest failed: ' + str (exc), exc_info = args.debug)
        sys.exit (1)

if __name__ == '__main__':
    if sys.hexversion < 0x02070000:
        sys.exit (sys.argv [0] + ': Error: Python version >= 2.7 and < 3.0 '
                  'required.') 

    main ()
